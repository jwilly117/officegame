{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Nav","href","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","components_NavMessage","id","role","Header","Container","children","ClickItem","onClick","handleClick","style","backgroundImage","concat","image","shake","Footer","Game","data","handleCorrectGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","components_Nav","components_Header","components_Container","components_ClickItem","key","components_Footer","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8722ee0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\n// NavMessage renders an li tag containing an message for the user\r\n\r\nclass NavMessage extends Component {\r\n  state = {\r\n    message: \"\",\r\n    animating: false\r\n  };\r\n\r\n  componentDidUpdate({ score, topScore }, prevState) {\r\n    const newState = { animating: true };\r\n\r\n    if (score === 0 && topScore === 0) {\r\n      newState.message = \"\";\r\n    } else if (score === 0 && topScore > 0) {\r\n      newState.message = \"incorrect\";\r\n    } else {\r\n      newState.message = \"correct\";\r\n    }\r\n\r\n    if (score !== this.props.score || this.state.message !== newState.message) {\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  renderMessage = () => {\r\n    switch (this.state.message) {\r\n    case \"correct\":\r\n      return \"Correct\\n\";\r\n    case \"incorrect\":\r\n      return \"Wrong\\n\";\r\n    default:\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li\r\n        className={this.state.animating ? this.state.message : \"\"}\r\n        onAnimationEnd={() => this.setState({ animating: false })}\r\n      >\r\n        {this.renderMessage()}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavMessage;\r\n","import React from \"react\";\r\nimport NavMessage from \"../NavMessage\";\r\nimport \"./style.css\";\r\n\r\n// Component for the Navbar\r\n\r\nfunction Nav(props) {\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n  <a className=\"navbar-brand\" href=\"#\"></a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <ul>\r\n         <li className=\"brand\">\r\n           <a href=\"/\">The Office (US)</a> \r\n           \r\n          \r\n          \r\n         </li>\r\n       \r\n\r\n         <NavMessage score={props.score} topScore={props.topScore} />\r\n        \r\n\r\n        <li>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n         </li>\r\n        \r\n      \r\n        \r\n       </ul>\r\n  \r\n    \r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      \r\n    <a className=\"btn btn-link\" id=\"back\" href=\"https://jwilly117.github.io/homework2responsive/\" role=\"button\">Back To Portfolio</a>\r\n\r\n    </form>\r\n  \r\n</nav>\r\n    \r\n    // <nav className=\"navbar\">\r\n    //   <ul>\r\n    //     <li className=\"brand\">\r\n    //       <a href=\"/\">Clicky Game</a> \r\n    //       <a href=\"https://www.google.com\">Home</a>\r\n          \r\n          \r\n    //     </li>\r\n       \r\n\r\n    //     <NavMessage score={props.score} topScore={props.topScore} />\r\n        \r\n\r\n    //     <li>\r\n    //       Score: {props.score} | Top Score: {props.topScore}\r\n    //     </li>\r\n        \r\n      \r\n        \r\n    //   </ul>\r\n    // </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>The Office - Randomizer!</h1>\r\n      <h2>Click on a Random Employee to rack up Points, Try to get a high Score!</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return <main className=\"container\">{props.children}</main>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction ClickItem(props) {\r\n    return (\r\n        // Create a div that will contain the images and their clicked reactions.\r\n\r\n        <div\r\n        role=\"img\"\r\n        aria-label=\"click item\"\r\n        onClick={() => props.handleClick(props.id)}\r\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\r\n        className={`picBox${props.shake ? \"\" : \"\"}`}\r\n        >\r\n        </div>\r\n    );\r\n}\r\nexport default ClickItem;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <div className=\"bottom\">\r\n          The Office (US) Random Click Game - JW \r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n  \r\n  export default Footer;\r\n  ","import React, { Component } from \"react\";\r\nimport Nav from \"../Nav\";\r\nimport Header from \"../Header\";\r\nimport Container from \"../Container\";\r\nimport ClickItem from \"../ClickItem\";\r\nimport Footer from \"../Footer\";\r\nimport data from \"../../data.json\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: this.shuffleData(this.state.data) });\r\n  }\r\n\r\n  handleCorrectGuess = newData => {\r\n    const { topScore, score } = this.state;\r\n    const newScore = score + 1;\r\n    const newTopScore = Math.max(newScore, topScore);\r\n\r\n    this.setState({\r\n      data: this.shuffleData(newData),\r\n      score: newScore,\r\n      topScore: newTopScore\r\n    });\r\n  };\r\n\r\n  handleIncorrectGuess = data => {\r\n    this.setState({\r\n      data: this.resetData(data),\r\n      score: 0\r\n    });\r\n  };\r\n\r\n  resetData = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleData(resetData);\r\n  };\r\n\r\n  shuffleData = data => {\r\n    let i = data.length - 1;\r\n    while (i > 0) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n      i--;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleItemClick = id => {\r\n    let guessedCorrectly = false;\r\n    const newData = this.state.data.map(item => {\r\n      const newItem = { ...item };\r\n      if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n          newItem.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n      }\r\n      return newItem;\r\n    });\r\n    guessedCorrectly\r\n      ? this.handleCorrectGuess(newData)\r\n      : this.handleIncorrectGuess(newData);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav score={this.state.score} topScore={this.state.topScore} />\r\n        <Header />\r\n        <Container>\r\n          {this.state.data.map(item => (\r\n            <ClickItem\r\n              key={item.id}\r\n              id={item.id}\r\n              shake={!this.state.score && this.state.topScore}\r\n              handleClick={this.handleItemClick}\r\n              image={item.image}\r\n            />\r\n          ))}\r\n        </Container>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}